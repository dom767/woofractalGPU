rule main {
babyduck
}

rule babyduck {
pos += vec(-6, 0, -6)

diff = vec(0.3, 1, 0.3)
v1 = vec(1,1,0) nano10x10

pos.y += 0.78
diff = vec(1,0.5,0)
v1 = vec(5, 3, 0) nano2x1
v1 = vec(5, 4, 0) nano2x1

pos.y += 0.78
v1 = vec(6, 3, 0) nano1x1c
v1 = vec(6, 4, 0) nano1x1c

pos.y += 0.78
diff = vec(1, 1, 0.0)
v1 = vec(4.5, 3, 0) nano4x2

pos.y += 0.78
v1 = vec(3.5, 3, 0) nano4x2
diff = vec(1,1,1)
v1 = vec(7.5, 3, 0) nano2x2

pos.y += 0.78
diff = vec(1, 1, 0.0)
v1 = vec(3.5, 3, 0) nano1x2
v1 = vec(5.5, 3, 0) nano1x2
v1 = vec(6.5, 3, 0) nano2x2

pos.y += 0.78
diff = vec(1, 0.5, 0)
v1 = vec(1, 3.5, 0) nano2x1
diff = vec(1, 1, 0)
v1 = vec(3, 3, 0) nano2x2

pos.y += 0.78
v1 = vec(2, 3, 0) nano1x2
diff = vec(0.3, 0.3, 0.3)
v1 = vec(3, 3, 0) nano1x1c
v1 = vec(3, 4, 0) nano1x1c
diff = vec(1, 1, 0.0)
v1 = vec(4, 3, 0) nano1x2

pos.y += 0.78
v1 = vec(2, 3, 0) nano2x2
}


rule nano1x1 {
v0 = vec(1,1,0) nanobox
}

rule nano10x10 {
v0 = vec(10,10,0) nanobox
}

rule nano2x2 {
v0 = vec(2,2,0) nanobox
}

rule nano2x1 {
v0 = vec(2,1,0) nanobox
}

rule nano1x2 {
v0 = vec(1,2,0) nanobox
}

rule nano4x2 {
v0 = vec(4,2,0) nanobox
}

rule nano2x4 {
v0 = vec(2,4,0) nanobox
}

rule nano4x1 {
v0 = vec(4,1,0) nanobox
}

rule nano1x4 {
v0 = vec(1,4,0) nanobox
}

rule nano3x1 {
v0 = vec(3,1,0) nanobox
}

rule nano1x3 {
v0 = vec(1,3,0) nanobox
}

rule nano1x1c
{
 {
 pos.x += v1.x pos.z += v1.y

 scale = vec(0.97, 0.775, 0.97)
 cylinder
 pos.y += 1
 scale = vec(1,1,1)
 nanocyl
 }
}

rule nano2x1s
{
ry -= 90
nano1x2s
}

rule nano1x2s
{
 {
 pos.x += v1.x pos.z += v1.y

 pos.z += 0.5
 scale = vec(0.97, 0.775, 1.97)
 box
 scale = vec(1, 1, 1)
 pos.z -= 0.5
 
 pos.y += 0.775
 pos.z += 0.5
 nanocyl
 }
}

rule nanobox
{
 {
 pos.x += v1.x pos.z += v1.y

 // move middle location
 pos.x += (v0.x * 0.5) - 0.5
 pos.z += (v0.y * 0.5) - 0.5

 // give a bit of noise to the box
 scale = vec(v0.x - 0.03, 0.775, v0.y - 0.03)
 box

 // move to top surface of box
 pos.y += 1

 // reset for the little nanocylinders
 scale = vec(1,1,1)
 pos.x -= (v0.x * 0.5) - 0.5
 pos.z -= (v0.y * 0.5) - 0.5

 // build the nanocylinders
 repeat (v0.x) { xcyl }
 }
}

rule xcyl
{
// preserve state between calls
{ repeat(v0.y) { zcyl } }
pos.x += 1
}

rule zcyl
{
nanocyl
pos.z += 1
}

rule nanocyl
{
scale = vec(0.6, 0.39, 0.6)
cylinder
}