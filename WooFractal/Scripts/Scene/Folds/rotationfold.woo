rule main {
scale = vec(8,8,8)

distanceminimum=0.0005
distanceiterations=2000
stepsize=0.8

scale = vec(10,10,10)

diff = vec(0.3,0.2,0.1)
refl = vec(0.3,0.3,0.3)
spec = vec(0.2,0.2,0.2)
power = 26
gloss = 0.999

//materialfunction(marble)
materialfunction(voronoi)
sphere
//distancefunction(spheres4)
//distance
}

shader voronoi
{
diff = vec(1,0,0)//voronoi(pos, 713, 30),0,0)
diff = lerp(vec(1,0.9,0.8), vec(0,0,0), diff.x)
}

shader marble
{
diff = vec(pow(turb3d(pos, 1.0, 0.8, 713,7, 0.7),4),0,0)
diff = lerp(vec(1,0.9,0.8), vec(0,0,0), diff.x)
}

shader spheres4
{
pos = vec(pos.x, pos.y, pos.z)
diff = rotatefold(pos, 0.5)
diff = rotatefold(rotz(diff, 90), 1)
diff = diff+vec(0,0,-0.9)

distance =sphere(diff,vec(0,0,0),0.01*sqrt(1-pos.y*pos.y))
}

shader spheres3
{
diff = rotatefold(pos, 11.25)
diff = rotatefold(rotz(diff, 90), 5.625)
diff = diff+vec(0,0,-0.9)
diff = rotatefold(diff, 11.25)
diff = rotatefold(rotz(diff, 90), 5.625)
diff = diff+vec(0,0,-0.07)

distance =sphere(diff,vec(0,0,0),0.006*sqrt(1-pos.y*pos.y))
}

shader spheres2
{
diff = rotatefold(pos, 11.25)
diff = rotatefold(rotz(diff, 90), 5.625)
diff = diff+vec(0,0,-0.9)

distance =max(sphere(pos, vec(0,0,0), 0.9), neg(sphere(diff,vec(0,0,0),0.06*sqrt(1-pos.y*pos.y))))
}

shader spheres
{
diff = rotatefold(vec( pos.x, fold(pos.y, 0.07), pos.z), 11.25)
diff = diff+vec(0,0,-0.94*sqrt(1-pos.y*pos.y))
distance =sphere(diff,vec(0,0,0),0.07*sqrt(1-pos.y*pos.y))
}